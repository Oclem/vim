# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	/******************************************************************//**
	 *   @class		$1
	 *
	 *   @brief		${4:brief description of class $1}
	 *********************************************************************/

	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2}); ///<Default constructor of class $1
		virtual ~$1 (); ///<Destructor of class $1

	private:

	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
snippet del 
	delete ${1:i};
	$1 = NULL;
snippet cout
	cout << "${1}" << endl;
snippet coutv
	cout << "${1:var}=" << $1 << endl;
snippet new
	${1:ObjectClass} *${2:objectName} = new $1();
snippet foreach
	for(auto ${2:item} : ${1:vectorObject}){
		${3:/* code */}
	}
snippet log
	Logger::getInstance().LOG(Logger::${1:DEBUG},true,"${2:text}");
snippet shptr
	shared_ptr<${1:ObjectClass}> ${2:objectName};
snippet shptrn
	shared_ptr<${1:ObjectClass}> ${2:objectName}(new $1());
